* ring-proxy

Dynamic and static proxy for [[https://github.com/ring-clojure/ring][Ring]]. The static proxy is mostly borrowed from
[[https://github.com/puppetlabs/ring-middleware][puppetlabs/ring-middleware]].

** Usage

To use ~ring-proxy~, add this project as a dependency in your Leiningen/Boot
project file:

#+BEGIN_SRC clojure
[derekchiang/ring-proxy "1.0.1"]
#+END_SRC

Then use the following namespace in your code:

#+BEGIN_SRC clojure
(ns your-ns
  (:require [derekchiang.ring-proxy :refer [wrap-proxy wrap-dynamic-proxy add-dynamic-proxy remove-dynamic-proxy clear-dynamic-proxies]]))
#+END_SRC

*** Dynamic Proxy

A dynamic proxy is one whose behavior can be modified after it's created.
Specifically, a dynamic proxy starts as a no-op (i.e. proxying nothing), and
later you may use the ~add~ and ~remove~ functions to add or remove proxy paths.

To create a dynamic proxy:

#+BEGIN_SRC clojure
(let [[wrap add remove clear] (dynamic-proxy)]
  (wrap handler))
#+END_SRC

To add a proxy path (refer to the "Static Proxy" section for details on the
arguments):

#+BEGIN_SRC clojure
(add id proxied-path remote-uri-base & [http-opts])
#+END_SRC

To remove a proxy path:

#+BEGIN_SRC clojure
(remove id)
#+END_SRC

To remove all dynamic proxies:

#+BEGIN_SRC clojure
(clear)
#+END_SRC

For instance: 

#+BEGIN_SRC clojure
;; Start the proxy
(let [[wrap add remove clear] (dynamic-proxy)]
  (-> handler
      wrap
      (run-jetty {:port 3000}))

  ;; Add a proxy path
  (add :some-id "/remote" "http://some-remote-uri")

  ;; Remove the proxy path
  (remove :some-id)

  ;; Clear all proxy paths
  (clear))

#+END_SRC

*** Static Proxy

#+BEGIN_SRC clojure
(wrap-proxy handler proxied-path remote-uri-base & [http-opts])
#+END_SRC

This function returns a ring handler that, when given a URL with a certain
prefix, proxies the request to a remote URL specified by the ~remote-uri-base~
argument.

The arguments are as follows:

- ~handler~: A ring-handler that will be used if the provided url does not begin
  with the proxied-path prefix
- ~proxied-path~: The URL prefix of all requests that are to be proxied. This
  can be either a string or a regular expression pattern. Note that, when this
  is a regular expression, the entire request URI will be appended to
  ~remote-uri-base~ when the URI is being rewritten, whereas if this argument is
  a string, the ~proxied-path~ will not be included.
- ~remote-uri-base~: The base URL that you want to proxy requests with the
  ~proxied-path~ prefix to.
- ~http-opts~: An optional list of options for an http client. This is used by
  the handler returned by ~wrap-proxy~ when it makes a proxied request to a
  remote URI. For a list of available options, please see the options defined
  for [[https://github.com/puppetlabs/clj-http-client][clj-http-client]].

For example, the following:

#+BEGIN_SRC clojure
(wrap-proxy handler "/hello-world" "http://localhost:9000/hello")
#+END_SRC

would return a ring handler that proxies all requests with URL prefix
"/hello-world" to ~http://localhost:9000/hello~.

The following:

#+BEGIN_SRC clojure
(wrap-proxy handler #"^/hello-world" "http://localhost:9000/hello")
#+END_SRC

would return a ring handler that proxies all requests with a URL path matching
the regex ~^/hello-world~ to ~http://localhost:9000/hello/[url-path]~.

**** Proxy Redirect Support

By default, all proxy requests using ~wrap-proxy~ will follow any redirects,
including on POST and PUT requests. To allow redirects but restrict their use on
POST and PUT requests, set the ~:force-redirects~ option to ~false~ in the
~http-opts~ map. To disable redirect following on proxy requests, set the
~:follow-redirects~ option to ~false~ in the ~http-opts~ map. Please not that if
proxy redirect following is disabled, you may have to disable it on the client
making the proxy request as well if the location returned by the redirect is
relative.

**** SSL Support

~wrap-proxy~ supports SSL. To add SSL support, you can set SSL options in the
~http-opts~ map as you would in a request made with [[https://github.com/puppetlabs/clj-http-client][clj-http-client]]. Simply set
the ~:ssl-cert~, ~:ssl-key~, and ~:ssl-ca-cert~ options in the ~http-opts~ map
to be paths to your .pem files.

** License

[[https://www.apache.org/licenses/LICENSE-2.0][Apache License v2.0]].
